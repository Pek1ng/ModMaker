using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModMaker.Sdk.Format
{
    /// <summary>
    /// Ini文件
    /// </summary>
    public class Ini : IFormat<Ini>
    {
        public Ini()
        {
            Sections = new();
        }

        /// <summary>
        /// 所有的节点
        /// </summary>
        public Dictionary<string, Dictionary<string, string>> Sections { get; set; }

        public void Add(string key, string value)
        {
            Add("", key, value);
        }

        public void Add(string section, string key, string value)
        {
            if (!Sections.ContainsKey(section))
            {
                Sections.Add(section, new());
            }

            if (Sections[section].ContainsKey(key))
            {
                Sections[section][key] = value;
            }
            else
            {
                Sections[section].Add(key, value);
            }
        }

        public override string Format()
        {
            var sb = new StringBuilder();

            sb.AppendLine("; This file is generated by ModMaker");

            foreach (var section in Sections)
            {
                if (section.Key != "")
                {
                    sb.AppendLine($"[{section.Key}]");
                }

                foreach (var kv in section.Value)
                {
                    sb.AppendLine($"{kv.Key}={kv.Value}");
                }
                sb.AppendLine();
            }

            return sb.ToString();
        }

        public override Ini Parse(string data)
        {
            var result = new Ini();

            string[] lines = data.Split(Environment.NewLine).Where(line => !line.StartsWith(";")).ToArray();

            string currentSection = "";

            foreach (var line in lines)
            {
                if (line.StartsWith("["))
                {
                    var section = line.TrimStart('[').TrimEnd(']');
                    currentSection = section;
                }
                else
                {
                    if (!result.Sections.ContainsKey(currentSection))
                    {
                        result.Sections.Add(currentSection, new());
                    }

                    var kv = line.Split('=');
                    if (kv.Length == 2)
                    {
                        result.Sections[currentSection][kv[0].Trim()] = kv[1].Trim();
                    }
                }
            }

            return result;
        }
    }
}